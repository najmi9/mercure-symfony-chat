# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
  admin_mail: '%env(ADMIN_EMAIL)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    App\Infrastructure\Mercure\Service\MercureCookieGenerator:
        arguments:
            $subscibe_secret: '%env(MERCURE_SUBSCRIBER_JWT_KEY)%'

    App\Infrastructure\Mercure\Service\JWTProvider:
        arguments:
            $publish_secret: '%env(MERCURE_PUBLISHER_JWT_KEY)%'

    App\Listeners\ConversationListener:
        tags:
            - { name: 'doctrine.orm.entity_listener', event: 'postPersist', entity: 'App\Entity\Conversation'}
            - { name: 'doctrine.orm.entity_listener', event: 'postUpdate', entity: 'App\Entity\Conversation'}

    App\Listeners\MessageListener:
        tags:
            - { name: 'doctrine.orm.entity_listener', event: 'postPersist', entity: 'App\Entity\Message'}
            - { name: 'doctrine.orm.entity_listener', event: 'postUpdate', entity: 'App\Entity\Message'}

    App\Services\FileUploader:
      arguments:
        $projectDir: '%kernel.project_dir%'

    App\Infrastructure\Notification\EmailNotifier:
      arguments:
        $admin_email: '%admin_mail%'

    App\Infrastructure\Queue\Subscriber\FailedMessageSubscriber:
      arguments:
        $admin_email: '%admin_mail%'

    App\Listeners\ExceptionListener:
      arguments:
        $admin_email: '%admin_mail%'

    App\EventListener\AccessDeniedListener:
        arguments:
            $twig: '@twig'
        tags:
            - { name: 'kernel.event_listener', event: 'kernel.exception', method: 'onKernelException' }
